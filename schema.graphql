type Balancer @entity {
  id: ID!
  color: String!                                      # Bronze, Silver, Gold
  version: Int!
  poolCount: Int!                                     # Number of pools
  finalizedPoolCount: Int!                            # Number of finalized pools
  finalizedFaasPoolCount: Int!                            # Number of finalized faas pools
  pools: [Pool!] @derivedFrom(field: "factoryID")
  txCount: BigInt!                                    # Number of txs
  totalLiquidity: BigDecimal!                         # All the pools liquidity value in USD
  totalFaasLiquidity: BigDecimal!                     # All the faas pools liquidity value in USD
  totalSwapVolume: BigDecimal!                        # All the swap volume in USD
  totalSwapFee: BigDecimal!                           # All the swap fee in USD
  totalCollectedFund: BigDecimal!

}

type Pool @entity {
  id: ID!                                             # Pool address
  version: Int!
  controller: Bytes!                                  # Controller address
  publicSwap: Boolean!                                # isPublicSwap
  finalized: Boolean!                                 # isFinalized
  active: Boolean!                                    # isActive
  swapFee: BigDecimal!                                # Swap Fees
  totalWeight: BigDecimal!
  totalShares: BigDecimal!                            # Total pool token shares
  totalSwapVolume: BigDecimal!                        # Total swap volume in USD
  totalSwapFee: BigDecimal!                           # Total swap fee in USD
  liquidity: BigDecimal!                              # Pool liquidity value in USD
  tokensList: [Bytes!]!                               # Temp workaround until graph supports filtering on derived field
  tokens: [PoolToken!] @derivedFrom(field: "poolId")
  shares: [PoolShare!] @derivedFrom(field: "poolId")
  createTime: Int!                                    # Block time pool was created
  tokensCount: BigInt!                                # Number of tokens in the pool
  holdersCount: BigInt!                               # Number of addresses holding a positive balance of BPT
  joinsCount: BigInt!                                 # liquidity has been added
  exitsCount: BigInt!                                 # liquidity has been removed
  swapsCount: BigInt!
  factoryID: Balancer!
  tx: Bytes                                           # Pool creation transaction id
}

type PoolToken @entity {
  id: ID!                                             # poolId + token address
  poolId: Pool!
  symbol: String
  name: String
  decimals: Int!
  address: String!
  balance: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  reserveUSD: BigDecimal!
  denormWeight: BigDecimal!
  priceUSD: BigDecimal!
}

type PoolShare @entity {
  id: ID!                                             # poolId + userAddress
  userAddress: User!
  poolId: Pool!
  balance: BigDecimal!
  totalBalance: BigDecimal!
  stakeBalance: BigDecimal!
}

type User @entity {
  id: ID!
  sharesOwned: [PoolShare!]  @derivedFrom(field: "userAddress")
}


type Token @entity {
  id: ID!
  symbol: String
  name: String
  decimals: Int!
  priceUSD: BigDecimal!
  poolLiquidity: BigDecimal!
  poolTokenId: String
  totalLiquidity: BigDecimal!
  tradeVolume: BigDecimal!
  tradeVolumeUSD: BigDecimal!
  collectedFundToken: BigDecimal!
  collectedFundTokenUSD: BigDecimal!
  txCount: BigInt!
}


